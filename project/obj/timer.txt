; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\timer.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\timer.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS_and_startup -I..\CMSIS_and_startup\CMSIS -I.\bsp -I..\Hal_lib\inc -I.\bsp\LCD -I.\bsp\LED -I.\bsp\SPI -I.\bsp\sys -I.\bsp\UART -I.\bsp\Timer -I.\bsp\exit -I.\bsp\touchpad -I.\RTE\_TK499_LTDC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=527 -DARMCM4_FP --omf_browse=.\obj\timer.crf bsp\Timer\timer.c]
                          THUMB

                          AREA ||i.TIM10_Config||, CODE, READONLY, ALIGN=2

                  TIM10_Config PROC
;;;64     
;;;65     void TIM10_Config(u16 arr,u16 psc)
000000  b57f              PUSH     {r0-r6,lr}
;;;66     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;67        TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;68        NVIC_InitTypeDef NVIC_InitStruct;        //中断参数结构体
;;;69        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM10,ENABLE); //TIM8时钟使能
000006  2101              MOVS     r1,#1
000008  2080              MOVS     r0,#0x80
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;70        TIM_TimeBaseStructure.TIM_Period = arr; //重装载值        
00000e  9502              STR      r5,[sp,#8]
;;;71        TIM_TimeBaseStructure.TIM_Prescaler =psc; //预分频值
000010  f8ad4004          STRH     r4,[sp,#4]
;;;72        TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; //不懂，不用管
000014  2000              MOVS     r0,#0
000016  f8ad000c          STRH     r0,[sp,#0xc]
;;;73        TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //向上计数
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;74        TIM_TimeBaseInit(TIM10, &TIM_TimeBaseStructure); //初始化
00001e  a901              ADD      r1,sp,#4
000020  480d              LDR      r0,|L1.88|
000022  f7fffffe          BL       TIM_TimeBaseInit
;;;75             //中断优先级NVIC设置 
;;;76        TIM_ITConfig(TIM10,TIM_IT_Update,ENABLE ); //使能TIM8中断，允许更新中断
000026  2201              MOVS     r2,#1
000028  4611              MOV      r1,r2
00002a  480b              LDR      r0,|L1.88|
00002c  f7fffffe          BL       TIM_ITConfig
;;;77        NVIC_InitStruct.NVIC_IRQChannel = TIM10_IRQn;  //中断通道为 TIM10_IRQn
000030  203e              MOVS     r0,#0x3e
000032  f88d0000          STRB     r0,[sp,#0]
;;;78        NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 2;  //占先优先级0
000036  2002              MOVS     r0,#2
000038  f88d0001          STRB     r0,[sp,#1]
;;;79        NVIC_InitStruct.NVIC_IRQChannelSubPriority = 2;  //次优先级0
00003c  f88d0002          STRB     r0,[sp,#2]
;;;80        NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000040  2001              MOVS     r0,#1
000042  f88d0003          STRB     r0,[sp,#3]
;;;81        NVIC_Init(&NVIC_InitStruct);  //初始化NVIC寄存器
000046  4668              MOV      r0,sp
000048  f7fffffe          BL       NVIC_Init
;;;82             
;;;83        TIM_Cmd(TIM10, ENABLE);  //使能TIM8 
00004c  2101              MOVS     r1,#1
00004e  4802              LDR      r0,|L1.88|
000050  f7fffffe          BL       TIM_Cmd
;;;84     }
000054  bd7f              POP      {r0-r6,pc}
;;;85     void TIM10_IRQHandler(void)
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      0x40001c00

                          AREA ||i.TIM10_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM10_IRQHandler PROC
;;;84     }
;;;85     void TIM10_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;86     {
;;;87        if (TIM_GetITStatus(TIM10, TIM_IT_Update) != RESET)//检查TIM10更新中断发生与否
000002  2101              MOVS     r1,#1
000004  4805              LDR      r0,|L2.28|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b110              CBZ      r0,|L2.18|
;;;88     	{	
;;;89     		printf("\n TIM10_IRQn \n");
00000c  a004              ADR      r0,|L2.32|
00000e  f7fffffe          BL       __2printf
                  |L2.18|
;;;90     	}
;;;91     	TIM_ClearITPendingBit(TIM10, TIM_IT_Update); //清除TIM10更新中断标志 
000012  2101              MOVS     r1,#1
000014  4801              LDR      r0,|L2.28|
000016  f7fffffe          BL       TIM_ClearITPendingBit
;;;92     }
00001a  bd10              POP      {r4,pc}
;;;93     
                          ENDP

                  |L2.28|
                          DCD      0x40001c00
                  |L2.32|
000020  0a205449          DCB      "\n TIM10_IRQn \n",0
000024  4d31305f
000028  4952516e
00002c  200a00  
00002f  00                DCB      0

                          AREA ||i.TIM3_Config||, CODE, READONLY, ALIGN=1

                  TIM3_Config PROC
;;;34     
;;;35     void TIM3_Config(u16 arr,u16 psc)
000000  b57f              PUSH     {r0-r6,lr}
;;;36     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;37        TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;38        NVIC_InitTypeDef NVIC_InitStruct;        //中断参数结构体
;;;39        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE); //TIM8时钟使能
000006  2101              MOVS     r1,#1
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;40        TIM_TimeBaseStructure.TIM_Period = arr; //重装载值        
00000e  9502              STR      r5,[sp,#8]
;;;41        TIM_TimeBaseStructure.TIM_Prescaler =psc; //预分频值
000010  f8ad4004          STRH     r4,[sp,#4]
;;;42        TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; //不懂，不用管
000014  2000              MOVS     r0,#0
000016  f8ad000c          STRH     r0,[sp,#0xc]
;;;43        TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //向上计数
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;44        TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //初始化
00001e  a901              ADD      r1,sp,#4
000020  f04f4080          MOV      r0,#0x40000000
000024  f7fffffe          BL       TIM_TimeBaseInit
;;;45             //中断优先级NVIC设置 
;;;46        TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE ); //使能TIM8中断，允许更新中断
000028  2201              MOVS     r2,#1
00002a  4611              MOV      r1,r2
00002c  0790              LSLS     r0,r2,#30
00002e  f7fffffe          BL       TIM_ITConfig
;;;47        NVIC_InitStruct.NVIC_IRQChannel = TIM3_IRQn;  //TIM6中断
000032  201c              MOVS     r0,#0x1c
000034  f88d0000          STRB     r0,[sp,#0]
;;;48        NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 2;  //占先优先级0
000038  2002              MOVS     r0,#2
00003a  f88d0001          STRB     r0,[sp,#1]
;;;49        NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;  //次优先级0
00003e  2001              MOVS     r0,#1
000040  f88d0002          STRB     r0,[sp,#2]
;;;50        NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000044  f88d0003          STRB     r0,[sp,#3]
;;;51        NVIC_Init(&NVIC_InitStruct);  //初始化NVIC寄存器
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       NVIC_Init
;;;52             
;;;53        TIM_Cmd(TIM3, ENABLE);  //使能TIM8 
00004e  2101              MOVS     r1,#1
000050  0788              LSLS     r0,r1,#30
000052  f7fffffe          BL       TIM_Cmd
;;;54     }
000056  bd7f              POP      {r0-r6,pc}
;;;55     
                          ENDP


                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM3_IRQHandler PROC
;;;55     
;;;56     void TIM3_IRQHandler(void)   //TIM3??
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58     	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)  //检查TIM3更新中断发生与否
000002  2101              MOVS     r1,#1
000004  0788              LSLS     r0,r1,#30
000006  f7fffffe          BL       TIM_GetITStatus
;;;59     		{
;;;60     			///	printf("\n TIM3_IRQn \n");
;;;61     		}
;;;62     			TIM_ClearITPendingBit(TIM3, TIM_IT_Update  );  //清除TIMx更新中断标志
00000a  2101              MOVS     r1,#1
00000c  0788              LSLS     r0,r1,#30
00000e  f7fffffe          BL       TIM_ClearITPendingBit
;;;63     }
000012  bd10              POP      {r4,pc}
;;;64     
                          ENDP


                          AREA ||i.TIM8_Config||, CODE, READONLY, ALIGN=2

                  TIM8_Config PROC
;;;3      
;;;4      void TIM8_Config(u16 arr,u16 psc)
000000  b57f              PUSH     {r0-r6,lr}
;;;5      {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;6         TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;7         NVIC_InitTypeDef NVIC_InitStruct;        //中断参数结构体
;;;8         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM8,ENABLE); //TIM8时钟使能
000006  2101              MOVS     r1,#1
000008  2020              MOVS     r0,#0x20
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;9         TIM_TimeBaseStructure.TIM_Period = arr; //重装载值        
00000e  9502              STR      r5,[sp,#8]
;;;10        TIM_TimeBaseStructure.TIM_Prescaler =psc; //预分频值
000010  f8ad4004          STRH     r4,[sp,#4]
;;;11        TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; //不懂，不用管
000014  2000              MOVS     r0,#0
000016  f8ad000c          STRH     r0,[sp,#0xc]
;;;12        TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //向上计数
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;13        TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure); //初始化
00001e  a901              ADD      r1,sp,#4
000020  480d              LDR      r0,|L5.88|
000022  f7fffffe          BL       TIM_TimeBaseInit
;;;14             //中断优先级NVIC设置 
;;;15        TIM_ITConfig(TIM8,TIM_IT_Update,ENABLE ); //使能TIM8中断，允许更新中断
000026  2201              MOVS     r2,#1
000028  4611              MOV      r1,r2
00002a  480b              LDR      r0,|L5.88|
00002c  f7fffffe          BL       TIM_ITConfig
;;;16        NVIC_InitStruct.NVIC_IRQChannel = TIM8_IRQn;  //TIM8中断
000030  2037              MOVS     r0,#0x37
000032  f88d0000          STRB     r0,[sp,#0]
;;;17        NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 2;  //占先优先级0
000036  2002              MOVS     r0,#2
000038  f88d0001          STRB     r0,[sp,#1]
;;;18        NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;  //次优先级0
00003c  2000              MOVS     r0,#0
00003e  f88d0002          STRB     r0,[sp,#2]
;;;19        NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000042  2001              MOVS     r0,#1
000044  f88d0003          STRB     r0,[sp,#3]
;;;20        NVIC_Init(&NVIC_InitStruct);  //初始化NVIC寄存器
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       NVIC_Init
;;;21             
;;;22        TIM_Cmd(TIM8, ENABLE);  //使能TIM8 
00004e  2101              MOVS     r1,#1
000050  4801              LDR      r0,|L5.88|
000052  f7fffffe          BL       TIM_Cmd
;;;23     }
000056  bd7f              POP      {r0-r6,pc}
;;;24     
                          ENDP

                  |L5.88|
                          DCD      0x40001400

                          AREA ||i.TIM8_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM8_IRQHandler PROC
;;;24     
;;;25     void TIM8_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27        if (TIM_GetITStatus(TIM8, TIM_IT_Update) != RESET)  //检查TIM8更新中断发生与否
000002  2101              MOVS     r1,#1
000004  4803              LDR      r0,|L6.20|
000006  f7fffffe          BL       TIM_GetITStatus
;;;28     	{	
;;;29     		///printf("\n TIM8_IRQn \n");
;;;30     	}
;;;31     	TIM_ClearITPendingBit(TIM8, TIM_IT_Update  );  //清除TIM8更新中断标志
00000a  2101              MOVS     r1,#1
00000c  4801              LDR      r0,|L6.20|
00000e  f7fffffe          BL       TIM_ClearITPendingBit
;;;32     }
000012  bd10              POP      {r4,pc}
;;;33     
                          ENDP

                  |L6.20|
                          DCD      0x40001400

;*** Start embedded assembler ***

#line 1 "bsp\\Timer\\timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_0fc38d0f____REV16|
#line 388 "..\\CMSIS_and_startup\\CMSIS\\cmsis_armcc.h"
|__asm___7_timer_c_0fc38d0f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_0fc38d0f____REVSH|
#line 402
|__asm___7_timer_c_0fc38d0f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_0fc38d0f____RRX|
#line 587
|__asm___7_timer_c_0fc38d0f____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
