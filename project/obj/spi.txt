; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\spi.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\spi.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS_and_startup -I..\CMSIS_and_startup\CMSIS -I.\bsp -I..\Hal_lib\inc -I.\bsp\LCD -I.\bsp\LED -I.\bsp\SPI -I.\bsp\sys -I.\bsp\UART -I.\bsp\Timer -I.\bsp\exit -I.\bsp\touchpad -I.\RTE\_TK499_LTDC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=527 -DARMCM4_FP --omf_browse=.\obj\spi.crf bsp\SPI\spi.c]
                          THUMB

                          AREA ||i.SPIMReadWriteByte||, CODE, READONLY, ALIGN=1

                  SPIMReadWriteByte PROC
;;;90     ********************************************************************************************************/
;;;91     unsigned int SPIMReadWriteByte(SPI_TypeDef* SPIx,unsigned char tx_data)
000000  b570              PUSH     {r4-r6,lr}
;;;92     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;93     	SPI_SendData(SPIx, tx_data);	
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPI_SendData
;;;94     	while (1)
00000e  e008              B        |L1.34|
                  |L1.16|
;;;95     	{
;;;96     		if(SPI_GetFlagStatus(SPIx, SPI_FLAG_RXAVL))	
000010  2102              MOVS     r1,#2
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPI_GetFlagStatus
000018  b118              CBZ      r0,|L1.34|
;;;97     		{
;;;98     			return SPI_ReceiveData(SPIx);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       SPI_ReceiveData
;;;99     		}
;;;100    	}
;;;101    }
000020  bd70              POP      {r4-r6,pc}
                  |L1.34|
000022  e7f5              B        |L1.16|
;;;102    
                          ENDP


                          AREA ||i.SPIMSendByte||, CODE, READONLY, ALIGN=1

                  SPIMSendByte PROC
;;;426    
;;;427    void SPIMSendByte(SPI_TypeDef* SPIx,unsigned char tx_data)
000000  b570              PUSH     {r4-r6,lr}
;;;428    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;429    	//SPI mode0 and clk is fclk/32 and enable spi
;;;430    	SPI_SendData(SPIx,tx_data);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPI_SendData
;;;431    
;;;432    	while (1)
00000e  e005              B        |L2.28|
                  |L2.16|
;;;433    	{
;;;434    		
;;;435    		if(SPI_GetFlagStatus(SPIx, SPI_FLAG_TXEPT))	
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPI_GetFlagStatus
000018  b100              CBZ      r0,|L2.28|
;;;436    		{
;;;437    			break;
00001a  e000              B        |L2.30|
                  |L2.28|
00001c  e7f8              B        |L2.16|
                  |L2.30|
00001e  bf00              NOP      
;;;438    		}
;;;439    	}
;;;440    
;;;441    }
000020  bd70              POP      {r4-r6,pc}
;;;442    
                          ENDP


                          AREA ||i.SPIM_BlockErase||, CODE, READONLY, ALIGN=1

                  SPIM_BlockErase PROC
;;;354    ********************************************************************************************************/
;;;355    void SPIM_BlockErase(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;356    {
000002  4604              MOV      r4,r0
;;;357    	SPIM_WriteEnable(SPIx);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       SPIM_WriteEnable
;;;358    	
;;;359    	SPIM_CSLow(SPIx);  								//Spi cs assign to this pin,select
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SPIM_CSLow
;;;360    
;;;361    	SPIMReadWriteByte(SPIx,BE);	
000010  21c7              MOVS     r1,#0xc7
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPIMReadWriteByte
;;;362    	
;;;363    	SPIM_CSHigh(SPIx);  							//Spi cs release
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       SPIM_CSHigh
;;;364    	
;;;365    	SPIM_checkStatus(SPIx);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SPIM_checkStatus
;;;366    }
000024  bd10              POP      {r4,pc}
;;;367    /********************************************************************************************************
                          ENDP


                          AREA ||i.SPIM_CSHigh||, CODE, READONLY, ALIGN=1

                  SPIM_CSHigh PROC
;;;29     ********************************************************************************************************/
;;;30     void SPIM_CSHigh(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;31     {
000002  4604              MOV      r4,r0
;;;32     	//Spi cs release
;;;33     	SPI_CSInternalSelected(SPIx, SPI_CS_BIT0,DISABLE);
000004  2200              MOVS     r2,#0
000006  f64f71fe          MOV      r1,#0xfffe
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SPI_CSInternalSelected
;;;34     }
000010  bd10              POP      {r4,pc}
;;;35     
                          ENDP


                          AREA ||i.SPIM_CSLow||, CODE, READONLY, ALIGN=1

                  SPIM_CSLow PROC
;;;17     ********************************************************************************************************/
;;;18     void SPIM_CSLow(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;19     {
000002  4604              MOV      r4,r0
;;;20     	//Spi cs assign to this pin,select	
;;;21     	SPI_CSInternalSelected(SPIx, SPI_CS_BIT0,ENABLE);
000004  2201              MOVS     r2,#1
000006  f64f71fe          MOV      r1,#0xfffe
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SPI_CSInternalSelected
;;;22     }
000010  bd10              POP      {r4,pc}
;;;23     
                          ENDP


                          AREA ||i.SPIM_Close||, CODE, READONLY, ALIGN=1

                  SPIM_Close PROC
;;;372    ********************************************************************************************************/
;;;373    void SPIM_Close(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;374    {
000002  4604              MOV      r4,r0
;;;375    	SPIM_CSHigh(SPIx);  							//Spi cs release
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       SPIM_CSHigh
;;;376    	SPIMReadWriteByte(SPIx,0x01);
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPIMReadWriteByte
;;;377    }
000012  bd10              POP      {r4,pc}
;;;378    
                          ENDP


                          AREA ||i.SPIM_Init||, CODE, READONLY, ALIGN=2

                  SPIM_Init PROC
;;;139    ********************************************************************************************************/
;;;140    void SPIM_Init(SPI_TypeDef* SPIx,unsigned short spi_baud_div)
000000  b530              PUSH     {r4,r5,lr}
;;;141    {
000002  b087              SUB      sp,sp,#0x1c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;142    	SPI_InitTypeDef SPI_InitStructure;
;;;143    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;144    	
;;;145    		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI2, ENABLE);  //SPI1 clk enable
000008  2101              MOVS     r1,#1
00000a  0548              LSLS     r0,r1,#21
00000c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;146    		
;;;147    		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA ,ENABLE);
000010  2101              MOVS     r1,#1
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;148    	
;;;149    		                           //  LCD_BL       LCD=> RS or DCX
;;;150    		GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_2 | GPIO_Pin_3;   		 
000018  200c              MOVS     r0,#0xc
00001a  9001              STR      r0,[sp,#4]
;;;151    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001c  2003              MOVS     r0,#3
00001e  f88d0008          STRB     r0,[sp,#8]
;;;152    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 	// 通用推免输出
000022  2010              MOVS     r0,#0x10
000024  f88d0009          STRB     r0,[sp,#9]
;;;153    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000028  a901              ADD      r1,sp,#4
00002a  482a              LDR      r0,|L7.212|
00002c  f7fffffe          BL       GPIO_Init
;;;154    		
;;;155    		GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_4;   		//spi1_cs  pa4
000030  2010              MOVS     r0,#0x10
000032  9001              STR      r0,[sp,#4]
;;;156    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000034  2003              MOVS     r0,#3
000036  f88d0008          STRB     r0,[sp,#8]
;;;157    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 	// 通用推免输出
00003a  2010              MOVS     r0,#0x10
00003c  f88d0009          STRB     r0,[sp,#9]
;;;158    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000040  a901              ADD      r1,sp,#4
000042  4824              LDR      r0,|L7.212|
000044  f7fffffe          BL       GPIO_Init
;;;159    		                            // SCK          MOSI
;;;160    		GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_5 | GPIO_Pin_7;
000048  20a0              MOVS     r0,#0xa0
00004a  9001              STR      r0,[sp,#4]
;;;161    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00004c  2003              MOVS     r0,#3
00004e  f88d0008          STRB     r0,[sp,#8]
;;;162    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 	// 推免复用输出
000052  2018              MOVS     r0,#0x18
000054  f88d0009          STRB     r0,[sp,#9]
;;;163    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000058  a901              ADD      r1,sp,#4
00005a  481e              LDR      r0,|L7.212|
00005c  f7fffffe          BL       GPIO_Init
;;;164    		
;;;165    		GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_6;  		//spi1_miso  pa6
000060  2040              MOVS     r0,#0x40
000062  9001              STR      r0,[sp,#4]
;;;166    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000064  2003              MOVS     r0,#3
000066  f88d0008          STRB     r0,[sp,#8]
;;;167    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 		//上拉输入   
00006a  2048              MOVS     r0,#0x48
00006c  f88d0009          STRB     r0,[sp,#9]
;;;168    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000070  a901              ADD      r1,sp,#4
000072  4818              LDR      r0,|L7.212|
000074  f7fffffe          BL       GPIO_Init
;;;169    		
;;;170    	GPIOA->AFRL &= 0;
000078  4816              LDR      r0,|L7.212|
00007a  6a00              LDR      r0,[r0,#0x20]
00007c  2000              MOVS     r0,#0
00007e  4915              LDR      r1,|L7.212|
000080  6208              STR      r0,[r1,#0x20]
;;;171    	GPIOA->AFRL |= 0x555000ee;
000082  4608              MOV      r0,r1
000084  6a00              LDR      r0,[r0,#0x20]
000086  4914              LDR      r1,|L7.216|
000088  4308              ORRS     r0,r0,r1
00008a  4912              LDR      r1,|L7.212|
00008c  6208              STR      r0,[r1,#0x20]
;;;172    
;;;173    	GPIOA->BSRR = 0x4;
00008e  2004              MOVS     r0,#4
000090  6108              STR      r0,[r1,#0x10]
;;;174    
;;;175    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
000092  f8ad000c          STRH     r0,[sp,#0xc]
;;;176    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000096  2000              MOVS     r0,#0
000098  f8ad000e          STRH     r0,[sp,#0xe]
;;;177    	SPI_InitStructure.SPI_DataWidth = SPI_DataWidth_8b;
00009c  2008              MOVS     r0,#8
00009e  f8ad0010          STRH     r0,[sp,#0x10]
;;;178    
;;;179    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;    		
0000a2  2002              MOVS     r0,#2
0000a4  f8ad0012          STRH     r0,[sp,#0x12]
;;;180    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;  
0000a8  2000              MOVS     r0,#0
0000aa  f8ad0014          STRH     r0,[sp,#0x14]
;;;181    	
;;;182    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
0000ae  f8ad0016          STRH     r0,[sp,#0x16]
;;;183    	SPI_InitStructure.SPI_BaudRatePrescaler = spi_baud_div;
0000b2  f8ad4018          STRH     r4,[sp,#0x18]
;;;184    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
0000b6  f8ad001a          STRH     r0,[sp,#0x1a]
;;;185    	SPI_Init(SPIx, &SPI_InitStructure);
0000ba  a903              ADD      r1,sp,#0xc
0000bc  4628              MOV      r0,r5
0000be  f7fffffe          BL       SPI_Init
;;;186    
;;;187    	SPI_Cmd(SPIx, ENABLE); 	//Enables the specified SPI peripheral SPI使能、主机模式 8位数据模式 SPI 的波特率
0000c2  2101              MOVS     r1,#1
0000c4  4628              MOV      r0,r5
0000c6  f7fffffe          BL       SPI_Cmd
;;;188    	SPIM_TXEn(SPIx);
0000ca  4628              MOV      r0,r5
0000cc  f7fffffe          BL       SPIM_TXEn
;;;189    //	SPIM_RXEn(SPIx);	
;;;190    }
0000d0  b007              ADD      sp,sp,#0x1c
0000d2  bd30              POP      {r4,r5,pc}
;;;191    
                          ENDP

                  |L7.212|
                          DCD      0x40020000
                  |L7.216|
                          DCD      0x555000ee

                          AREA ||i.SPIM_PageProgram||, CODE, READONLY, ALIGN=1

                  SPIM_PageProgram PROC
;;;296    ********************************************************************************************************/
;;;297    void SPIM_PageProgram(SPI_TypeDef* SPIx,unsigned long address,unsigned char *p,unsigned int number)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;298    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;299    	unsigned int j;
;;;300    	unsigned char addr0,addr1,addr2;
;;;301    	address = address&0xffffff00; 					//page address
00000c  f02404ff          BIC      r4,r4,#0xff
;;;302    	addr0 = (unsigned char)(address>>16);
000010  f3c44907          UBFX     r9,r4,#16,#8
;;;303    	addr1 = (unsigned char)(address>>8);
000014  f3c42a07          UBFX     r10,r4,#8,#8
;;;304    	addr2 = (unsigned char)address;
000018  f0040bff          AND      r11,r4,#0xff
;;;305    
;;;306    	SPIM_WriteEnable(SPIx);
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       SPIM_WriteEnable
;;;307    	SPIM_CSLow(SPIx);  								//Spi cs assign to this pin,select
000022  4640              MOV      r0,r8
000024  f7fffffe          BL       SPIM_CSLow
;;;308    	SPIMReadWriteByte(SPIx,PP);
000028  2102              MOVS     r1,#2
00002a  4640              MOV      r0,r8
00002c  f7fffffe          BL       SPIMReadWriteByte
;;;309    	SPIMReadWriteByte(SPIx,addr0);
000030  4649              MOV      r1,r9
000032  4640              MOV      r0,r8
000034  f7fffffe          BL       SPIMReadWriteByte
;;;310    	SPIMReadWriteByte(SPIx,addr1);
000038  4651              MOV      r1,r10
00003a  4640              MOV      r0,r8
00003c  f7fffffe          BL       SPIMReadWriteByte
;;;311    	SPIMReadWriteByte(SPIx,addr2);
000040  4659              MOV      r1,r11
000042  4640              MOV      r0,r8
000044  f7fffffe          BL       SPIMReadWriteByte
;;;312    	for(j=0;j<number;j++)
000048  2700              MOVS     r7,#0
00004a  e005              B        |L8.88|
                  |L8.76|
;;;313    	{
;;;314    		SPIMReadWriteByte(SPIx,*(p++));
00004c  f8151b01          LDRB     r1,[r5],#1
000050  4640              MOV      r0,r8
000052  f7fffffe          BL       SPIMReadWriteByte
000056  1c7f              ADDS     r7,r7,#1              ;312
                  |L8.88|
000058  42b7              CMP      r7,r6                 ;312
00005a  d3f7              BCC      |L8.76|
;;;315    	}
;;;316    
;;;317    	SPIM_CSHigh(SPIx);  							//Spi cs release
00005c  4640              MOV      r0,r8
00005e  f7fffffe          BL       SPIM_CSHigh
;;;318    
;;;319    	SPIM_checkStatus(SPIx);
000062  4640              MOV      r0,r8
000064  f7fffffe          BL       SPIM_checkStatus
;;;320    }
000068  e8bd9ff0          POP      {r4-r12,pc}
;;;321    
                          ENDP


                          AREA ||i.SPIM_PageRead||, CODE, READONLY, ALIGN=2

                  SPIM_PageRead PROC
;;;265    ********************************************************************************************************/
;;;266    void SPIM_PageRead(SPI_TypeDef* SPIx,unsigned long address,unsigned char *p,unsigned int number)  //page = 256 bytes
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;267    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4692              MOV      r10,r2
00000a  469b              MOV      r11,r3
;;;268    	unsigned char addr0,addr1,addr2;
;;;269    	unsigned int i;
;;;270    	address = address&0xffffff00; 					//page address
00000c  f02404ff          BIC      r4,r4,#0xff
;;;271    	addr0 = (unsigned char)(address>>16);
000010  f3c44707          UBFX     r7,r4,#16,#8
;;;272    	addr1 = (unsigned char)(address>>8);
000014  f3c42807          UBFX     r8,r4,#8,#8
;;;273    	addr2 = (unsigned char)address;
000018  f00409ff          AND      r9,r4,#0xff
;;;274    	
;;;275    	SPIM_CSLow(SPIx); 								//Spi cs assign to this pin,select
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       SPIM_CSLow
;;;276    	
;;;277    	SPIMReadWriteByte(SPIx,READ);
000022  2103              MOVS     r1,#3
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       SPIMReadWriteByte
;;;278    	SPIMReadWriteByte(SPIx,addr0);
00002a  4639              MOV      r1,r7
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       SPIMReadWriteByte
;;;279    	SPIMReadWriteByte(SPIx,addr1);
000032  4641              MOV      r1,r8
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       SPIMReadWriteByte
;;;280    	SPIMReadWriteByte(SPIx,addr2);
00003a  4649              MOV      r1,r9
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       SPIMReadWriteByte
;;;281    
;;;282    	for(i=0;i<256;i++)
000042  2500              MOVS     r5,#0
000044  e006              B        |L9.84|
                  |L9.70|
;;;283    	{
;;;284    		rxtmpdata[i] = SPIMReadWriteByte(SPIx,0x00);
000046  2100              MOVS     r1,#0
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       SPIMReadWriteByte
00004e  4905              LDR      r1,|L9.100|
000050  5548              STRB     r0,[r1,r5]
000052  1c6d              ADDS     r5,r5,#1              ;282
                  |L9.84|
000054  2dff              CMP      r5,#0xff              ;282
000056  d9f6              BLS      |L9.70|
;;;285    	}
;;;286    
;;;287    	
;;;288    	SPIM_CSHigh(SPIx);  							//Spi cs release
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       SPIM_CSHigh
;;;289    }
00005e  e8bd9ff0          POP      {r4-r12,pc}
;;;290    
                          ENDP

000062  0000              DCW      0x0000
                  |L9.100|
                          DCD      rxtmpdata

                          AREA ||i.SPIM_RXDisable||, CODE, READONLY, ALIGN=1

                  SPIM_RXDisable PROC
;;;77     ********************************************************************************************************/
;;;78     void SPIM_RXDisable(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;79     {
000002  4604              MOV      r4,r0
;;;80     	//disable RXEN
;;;81     	SPI_BiDirectionalLineConfig(SPIx, SPI_Disable_Rx);
000004  f64f71ef          MOV      r1,#0xffef
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPI_BiDirectionalLineConfig
;;;82     }
00000e  bd10              POP      {r4,pc}
;;;83     
                          ENDP


                          AREA ||i.SPIM_RXEn||, CODE, READONLY, ALIGN=1

                  SPIM_RXEn PROC
;;;65     ********************************************************************************************************/
;;;66     void SPIM_RXEn(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;67     {
000002  4604              MOV      r4,r0
;;;68     	//enable RXEN
;;;69     	SPI_BiDirectionalLineConfig(SPIx, SPI_Direction_Rx);
000004  2110              MOVS     r1,#0x10
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_BiDirectionalLineConfig
;;;70     }
00000c  bd10              POP      {r4,pc}
;;;71     
                          ENDP


                          AREA ||i.SPIM_ReadID||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  SPIM_ReadID PROC
;;;197    ********************************************************************************************************/
;;;198    void SPIM_ReadID(SPI_TypeDef* SPIx)
000000  b570              PUSH     {r4-r6,lr}
;;;199    {
000002  4606              MOV      r6,r0
;;;200    	unsigned char temp;
;;;201    	unsigned int i;
;;;202    	
;;;203    	SPIM_CSLow(SPIx);								//Spi cs assign to this pin,select
000004  4630              MOV      r0,r6
000006  f7fffffe          BL       SPIM_CSLow
;;;204    	SPIMReadWriteByte(SPIx,RDID);				
00000a  219f              MOVS     r1,#0x9f
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       SPIMReadWriteByte
;;;205    
;;;206    	for(i=0;i<3;i++)
000012  2500              MOVS     r5,#0
000014  e009              B        |L12.42|
                  |L12.22|
;;;207    	{
;;;208    		temp = SPIMReadWriteByte(SPIx,0x01);
000016  2101              MOVS     r1,#1
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       SPIMReadWriteByte
00001e  b2c4              UXTB     r4,r0
;;;209    		printf("temp=0x%x\r\n",temp);		
000020  4621              MOV      r1,r4
000022  a005              ADR      r0,|L12.56|
000024  f7fffffe          BL       __2printf
000028  1c6d              ADDS     r5,r5,#1              ;206
                  |L12.42|
00002a  2d03              CMP      r5,#3                 ;206
00002c  d3f3              BCC      |L12.22|
;;;210    	}
;;;211    	SPIM_CSHigh(SPIx);   							//Spi cs release
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       SPIM_CSHigh
;;;212    }
000034  bd70              POP      {r4-r6,pc}
;;;213    
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
000038  74656d70          DCB      "temp=0x%x\r\n",0
00003c  3d307825
000040  780d0a00

                          AREA ||i.SPIM_Readbyte||, CODE, READONLY, ALIGN=1

                  SPIM_Readbyte PROC
;;;442    
;;;443    unsigned char SPIM_Readbyte(SPI_TypeDef* SPIx)
000000  b570              PUSH     {r4-r6,lr}
;;;444    {
000002  4605              MOV      r5,r0
;;;445    	unsigned char temp;
;;;446    	 
;;;447    	while(1)
000004  e005              B        |L13.18|
                  |L13.6|
;;;448    	{
;;;449    		if(SPI_GetFlagStatus(SPIx, SPI_FLAG_RXAVL)) 
000006  2102              MOVS     r1,#2
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       SPI_GetFlagStatus
00000e  b100              CBZ      r0,|L13.18|
;;;450    		{
;;;451    			break;
000010  e000              B        |L13.20|
                  |L13.18|
000012  e7f8              B        |L13.6|
                  |L13.20|
000014  bf00              NOP      
;;;452    		}
;;;453    		
;;;454    	}
;;;455    
;;;456    	temp = (unsigned char)SPI_ReceiveData(SPIx);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       SPI_ReceiveData
00001c  b2c4              UXTB     r4,r0
;;;457    	 
;;;458    	return temp;
00001e  4620              MOV      r0,r4
;;;459    }	
000020  bd70              POP      {r4-r6,pc}
;;;460    
                          ENDP


                          AREA ||i.SPIM_SectorErase||, CODE, READONLY, ALIGN=1

                  SPIM_SectorErase PROC
;;;327    ********************************************************************************************************/
;;;328    void SPIM_SectorErase(SPI_TypeDef* SPIx,unsigned long address)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;329    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;330    	unsigned char addr0,addr1,addr2;
;;;331    	address = address & 0xffff0000;
000008  f36f040f          BFC      r4,#0,#16
;;;332    	addr0 = ((unsigned char)(address>>16))&0xff;
00000c  f3c44607          UBFX     r6,r4,#16,#8
;;;333    	addr1 = ((unsigned char)(address>>8))&0xff;
000010  f3c42707          UBFX     r7,r4,#8,#8
;;;334    	addr2 = ((unsigned char)address)&0xff;
000014  f00408ff          AND      r8,r4,#0xff
;;;335    	
;;;336    	SPIM_WriteEnable(SPIx);
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       SPIM_WriteEnable
;;;337    	
;;;338    	SPIM_CSLow(SPIx);  								//Spi cs assign to this pin,select
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       SPIM_CSLow
;;;339    
;;;340    	SPIMReadWriteByte(SPIx,SE);
000024  21d8              MOVS     r1,#0xd8
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       SPIMReadWriteByte
;;;341    	SPIMReadWriteByte(SPIx,addr0);
00002c  4631              MOV      r1,r6
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       SPIMReadWriteByte
;;;342    	SPIMReadWriteByte(SPIx,addr1);
000034  4639              MOV      r1,r7
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       SPIMReadWriteByte
;;;343    	SPIMReadWriteByte(SPIx,addr2);
00003c  4641              MOV      r1,r8
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       SPIMReadWriteByte
;;;344    	SPIM_CSHigh(SPIx);  							//Spi cs release
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       SPIM_CSHigh
;;;345    	
;;;346    	SPIM_checkStatus(SPIx);
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       SPIM_checkStatus
;;;347    }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;348    
                          ENDP


                          AREA ||i.SPIM_TXDisable||, CODE, READONLY, ALIGN=1

                  SPIM_TXDisable PROC
;;;53     ********************************************************************************************************/
;;;54     void SPIM_TXDisable(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;55     {
000002  4604              MOV      r4,r0
;;;56     	//disable TXEN
;;;57     	SPI_BiDirectionalLineConfig(SPIx, SPI_Disable_Tx);
000004  f64f71f7          MOV      r1,#0xfff7
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPI_BiDirectionalLineConfig
;;;58     }
00000e  bd10              POP      {r4,pc}
;;;59     
                          ENDP


                          AREA ||i.SPIM_TXEn||, CODE, READONLY, ALIGN=1

                  SPIM_TXEn PROC
;;;41     ********************************************************************************************************/
;;;42     void SPIM_TXEn(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;43     {
000002  4604              MOV      r4,r0
;;;44     	//Transmit Enable bit TXEN
;;;45     	SPI_BiDirectionalLineConfig(SPIx, SPI_Direction_Tx);
000004  2108              MOVS     r1,#8
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_BiDirectionalLineConfig
;;;46     }
00000c  bd10              POP      {r4,pc}
;;;47     
                          ENDP


                          AREA ||i.SPIM_Test||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  SPIM_Test PROC
;;;384    ********************************************************************************************************/
;;;385    void SPIM_Test(SPI_TypeDef* SPIx)
000000  b570              PUSH     {r4-r6,lr}
;;;386    {
000002  4605              MOV      r5,r0
;;;387    	unsigned int i;
;;;388    	for(i=0;i<256;i++)
000004  2400              MOVS     r4,#0
000006  e002              B        |L17.14|
                  |L17.8|
;;;389    	{
;;;390    		tmpdata[i] = i;
000008  491b              LDR      r1,|L17.120|
00000a  550c              STRB     r4,[r1,r4]
00000c  1c64              ADDS     r4,r4,#1              ;388
                  |L17.14|
00000e  2cff              CMP      r4,#0xff              ;388
000010  d9fa              BLS      |L17.8|
;;;391    //		tmpdata[i] = 0xaa;
;;;392    	}
;;;393    
;;;394    		printf("spi1 test\r\n");
000012  a01a              ADR      r0,|L17.124|
000014  f7fffffe          BL       __2printf
;;;395    		SPIM_Init(SPIx,0x8);//36MHz
000018  2108              MOVS     r1,#8
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       SPIM_Init
;;;396    
;;;397    		SPIM_ReadID(SPIx);
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       SPIM_ReadID
;;;398    		
;;;399    		SPIM_SectorErase(SPIx,0);
000026  2100              MOVS     r1,#0
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       SPIM_SectorErase
;;;400    //	  SPIM_BlockErase(SPIx);
;;;401    		
;;;402    		SPIM_PageProgram(SPIx,0,tmpdata,256);
00002e  f44f7380          MOV      r3,#0x100
000032  4a11              LDR      r2,|L17.120|
000034  2100              MOVS     r1,#0
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       SPIM_PageProgram
;;;403    		
;;;404    		for(i=0;i<256;i++)
00003c  2400              MOVS     r4,#0
00003e  e003              B        |L17.72|
                  |L17.64|
;;;405    		{
;;;406    			rxtmpdata[i] = 0x0;
000040  2000              MOVS     r0,#0
000042  4911              LDR      r1,|L17.136|
000044  5508              STRB     r0,[r1,r4]
000046  1c64              ADDS     r4,r4,#1              ;404
                  |L17.72|
000048  2cff              CMP      r4,#0xff              ;404
00004a  d9f9              BLS      |L17.64|
;;;407    		}
;;;408    		SPIM_PageRead(SPIx,0,rxtmpdata,256); 		//把写进去的一页256字节读出来
00004c  f44f7380          MOV      r3,#0x100
000050  4a0d              LDR      r2,|L17.136|
000052  2100              MOVS     r1,#0
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       SPIM_PageRead
;;;409    		
;;;410    		for(i=0;i<256;i++)
00005a  2400              MOVS     r4,#0
00005c  e006              B        |L17.108|
                  |L17.94|
;;;411    		{
;;;412    				printf("rx[%d]=0x%x\r\n",i,rxtmpdata[i]);
00005e  480a              LDR      r0,|L17.136|
000060  5d02              LDRB     r2,[r0,r4]
000062  4621              MOV      r1,r4
000064  a009              ADR      r0,|L17.140|
000066  f7fffffe          BL       __2printf
00006a  1c64              ADDS     r4,r4,#1              ;410
                  |L17.108|
00006c  2cff              CMP      r4,#0xff              ;410
00006e  d9f6              BLS      |L17.94|
;;;413    		}
;;;414    		
;;;415    			printf("spi1 test over\r\n");
000070  a00a              ADR      r0,|L17.156|
000072  f7fffffe          BL       __2printf
;;;416    	
;;;417    	
;;;418    	
;;;419    }
000076  bd70              POP      {r4-r6,pc}
;;;420    
                          ENDP

                  |L17.120|
                          DCD      tmpdata
                  |L17.124|
00007c  73706931          DCB      "spi1 test\r\n",0
000080  20746573
000084  740d0a00
                  |L17.136|
                          DCD      rxtmpdata
                  |L17.140|
00008c  72785b25          DCB      "rx[%d]=0x%x\r\n",0
000090  645d3d30
000094  7825780d
000098  0a00    
00009a  00                DCB      0
00009b  00                DCB      0
                  |L17.156|
00009c  73706931          DCB      "spi1 test over\r\n",0
0000a0  20746573
0000a4  74206f76
0000a8  65720d0a
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0

                          AREA ||i.SPIM_WriteDisable||, CODE, READONLY, ALIGN=1

                  SPIM_WriteDisable PROC
;;;252    ********************************************************************************************************/
;;;253    void SPIM_WriteDisable(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;254    {	
000002  4604              MOV      r4,r0
;;;255    	SPIM_CSLow(SPIx);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       SPIM_CSLow
;;;256    	SPIMReadWriteByte(SPIx,WRDI);
00000a  2104              MOVS     r1,#4
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPIMReadWriteByte
;;;257    	SPIM_CSHigh(SPIx);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPIM_CSHigh
;;;258    }
000018  bd10              POP      {r4,pc}
;;;259    
                          ENDP


                          AREA ||i.SPIM_WriteEnable||, CODE, READONLY, ALIGN=1

                  SPIM_WriteEnable PROC
;;;219    ********************************************************************************************************/
;;;220    void SPIM_WriteEnable(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;221    {
000002  4604              MOV      r4,r0
;;;222    	SPIM_CSLow(SPIx); 								//Spi cs assign to this pin,select
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       SPIM_CSLow
;;;223    	SPIMReadWriteByte(SPIx,WREN);	
00000a  2106              MOVS     r1,#6
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPIMReadWriteByte
;;;224    	SPIM_CSHigh(SPIx); 								//Spi cs release
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPIM_CSHigh
;;;225    }
000018  bd10              POP      {r4,pc}
;;;226    
                          ENDP


                          AREA ||i.SPIM_checkStatus||, CODE, READONLY, ALIGN=1

                  SPIM_checkStatus PROC
;;;232    ********************************************************************************************************/
;;;233    void SPIM_checkStatus(SPI_TypeDef* SPIx)
000000  b570              PUSH     {r4-r6,lr}
;;;234    {
000002  4605              MOV      r5,r0
;;;235    	unsigned char temp;
;;;236    	SPIM_CSLow(SPIx); 								//Spi cs assign to this pin,select
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       SPIM_CSLow
;;;237    	SPIMReadWriteByte(SPIx,RDSR);	
00000a  2105              MOVS     r1,#5
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       SPIMReadWriteByte
;;;238    	while(1)
000012  e008              B        |L20.38|
                  |L20.20|
;;;239    	{
;;;240    		temp = SPIMReadWriteByte(SPIx,0x00);	
000014  2100              MOVS     r1,#0
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       SPIMReadWriteByte
00001c  b2c4              UXTB     r4,r0
;;;241    	 	if((temp&0x01)==0x0)
00001e  f0040001          AND      r0,r4,#1
000022  b900              CBNZ     r0,|L20.38|
;;;242    	 	break;
000024  e000              B        |L20.40|
                  |L20.38|
000026  e7f5              B        |L20.20|
                  |L20.40|
000028  bf00              NOP      
;;;243    	}
;;;244    	SPIM_CSHigh(SPIx);  							//Spi cs release
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       SPIM_CSHigh
;;;245    }
000030  bd70              POP      {r4-r6,pc}
;;;246    
                          ENDP


                          AREA ||i.SPI_RegRW||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  SPI_RegRW PROC
;;;102    
;;;103    void SPI_RegRW()
000000  b510              PUSH     {r4,lr}
;;;104    {
;;;105    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);  //SPI1 clk enable
000002  2101              MOVS     r1,#1
000004  0508              LSLS     r0,r1,#20
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;106    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);  //SPI1 clk enable 
00000a  2101              MOVS     r1,#1
00000c  0388              LSLS     r0,r1,#14
00000e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;107    	
;;;108    		printf("SPI1->TXREG=0x%x\r\n",  SPI1->TXREG);  
000012  483c              LDR      r0,|L21.260|
000014  6801              LDR      r1,[r0,#0]
000016  a03c              ADR      r0,|L21.264|
000018  f7fffffe          BL       __2printf
;;;109    		printf("SPI1->RXREG=0x%x\r\n",  SPI1->RXREG); 
00001c  4839              LDR      r0,|L21.260|
00001e  6841              LDR      r1,[r0,#4]
000020  a03e              ADR      r0,|L21.284|
000022  f7fffffe          BL       __2printf
;;;110    		printf("SPI1->CSTAT=0x%x\r\n",  SPI1->CSTAT); 																	 
000026  4837              LDR      r0,|L21.260|
000028  6881              LDR      r1,[r0,#8]
00002a  a041              ADR      r0,|L21.304|
00002c  f7fffffe          BL       __2printf
;;;111    		printf("SPI1->INTSTAT=0x%x\r\n",SPI1->INTSTAT);																
000030  4834              LDR      r0,|L21.260|
000032  68c1              LDR      r1,[r0,#0xc]
000034  a043              ADR      r0,|L21.324|
000036  f7fffffe          BL       __2printf
;;;112    		printf("SPI1->INTEN =0x%x\r\n", SPI1->INTEN );  																		 
00003a  4832              LDR      r0,|L21.260|
00003c  6901              LDR      r1,[r0,#0x10]
00003e  a047              ADR      r0,|L21.348|
000040  f7fffffe          BL       __2printf
;;;113    		printf("SPI1->INTCLR=0x%x\r\n", SPI1->INTCLR);  																			
000044  482f              LDR      r0,|L21.260|
000046  6941              LDR      r1,[r0,#0x14]
000048  a049              ADR      r0,|L21.368|
00004a  f7fffffe          BL       __2printf
;;;114    		printf("SPI1->GCTL  =0x%x\r\n", SPI1->GCTL  );  																 
00004e  482d              LDR      r0,|L21.260|
000050  6981              LDR      r1,[r0,#0x18]
000052  a04c              ADR      r0,|L21.388|
000054  f7fffffe          BL       __2printf
;;;115    		printf("SPI1->CCTL =0x%x\r\n",  SPI1->CCTL );   																	 
000058  482a              LDR      r0,|L21.260|
00005a  69c1              LDR      r1,[r0,#0x1c]
00005c  a04e              ADR      r0,|L21.408|
00005e  f7fffffe          BL       __2printf
;;;116    		printf("SPI1->SPBRG=0x%x\r\n",  SPI1->SPBRG);    																 
000062  4828              LDR      r0,|L21.260|
000064  6a01              LDR      r1,[r0,#0x20]
000066  a051              ADR      r0,|L21.428|
000068  f7fffffe          BL       __2printf
;;;117    		printf("SPI1->RXDNR=0x%x\r\n",  SPI1->RXDNR);    																	 
00006c  4825              LDR      r0,|L21.260|
00006e  6a41              LDR      r1,[r0,#0x24]
000070  a053              ADR      r0,|L21.448|
000072  f7fffffe          BL       __2printf
;;;118    		printf("SPI1->SCSR =0x%x\r\n",  SPI1->SCSR ); 
000076  4823              LDR      r0,|L21.260|
000078  6a81              LDR      r1,[r0,#0x28]
00007a  a056              ADR      r0,|L21.468|
00007c  f7fffffe          BL       __2printf
;;;119    	
;;;120    		printf("SPI2->TXREG=0x%x\r\n",  SPI2->TXREG);  
000080  4859              LDR      r0,|L21.488|
000082  6801              LDR      r1,[r0,#0]
000084  a059              ADR      r0,|L21.492|
000086  f7fffffe          BL       __2printf
;;;121    		printf("SPI2->RXREG=0x%x\r\n",  SPI2->RXREG); 
00008a  4857              LDR      r0,|L21.488|
00008c  1d00              ADDS     r0,r0,#4
00008e  6801              LDR      r1,[r0,#0]
000090  a05b              ADR      r0,|L21.512|
000092  f7fffffe          BL       __2printf
;;;122    		printf("SPI2->CSTAT=0x%x\r\n",  SPI2->CSTAT); 																					
000096  4854              LDR      r0,|L21.488|
000098  3008              ADDS     r0,r0,#8
00009a  6801              LDR      r1,[r0,#0]
00009c  a05d              ADR      r0,|L21.532|
00009e  f7fffffe          BL       __2printf
;;;123    		printf("SPI2->INTSTAT=0x%x\r\n",SPI2->INTSTAT);																				
0000a2  4851              LDR      r0,|L21.488|
0000a4  300c              ADDS     r0,r0,#0xc
0000a6  6801              LDR      r1,[r0,#0]
0000a8  a05f              ADR      r0,|L21.552|
0000aa  f7fffffe          BL       __2printf
;;;124    		printf("SPI2->INTEN =0x%x\r\n", SPI2->INTEN );  																				
0000ae  484e              LDR      r0,|L21.488|
0000b0  3010              ADDS     r0,r0,#0x10
0000b2  6801              LDR      r1,[r0,#0]
0000b4  a062              ADR      r0,|L21.576|
0000b6  f7fffffe          BL       __2printf
;;;125    		printf("SPI2->INTCLR=0x%x\r\n", SPI2->INTCLR);  																				
0000ba  484b              LDR      r0,|L21.488|
0000bc  3014              ADDS     r0,r0,#0x14
0000be  6801              LDR      r1,[r0,#0]
0000c0  a064              ADR      r0,|L21.596|
0000c2  f7fffffe          BL       __2printf
;;;126    		printf("SPI2->GCTL  =0x%x\r\n", SPI2->GCTL  );  																				
0000c6  4848              LDR      r0,|L21.488|
0000c8  3018              ADDS     r0,r0,#0x18
0000ca  6801              LDR      r1,[r0,#0]
0000cc  a066              ADR      r0,|L21.616|
0000ce  f7fffffe          BL       __2printf
;;;127    		printf("SPI2->CCTL =0x%x\r\n",  SPI2->CCTL );   																				
0000d2  4845              LDR      r0,|L21.488|
0000d4  301c              ADDS     r0,r0,#0x1c
0000d6  6801              LDR      r1,[r0,#0]
0000d8  a068              ADR      r0,|L21.636|
0000da  f7fffffe          BL       __2printf
;;;128    		printf("SPI2->SPBRG=0x%x\r\n",  SPI2->SPBRG);    																				
0000de  4842              LDR      r0,|L21.488|
0000e0  3020              ADDS     r0,r0,#0x20
0000e2  6801              LDR      r1,[r0,#0]
0000e4  a06a              ADR      r0,|L21.656|
0000e6  f7fffffe          BL       __2printf
;;;129    		printf("SPI2->RXDNR=0x%x\r\n",  SPI2->RXDNR);    
0000ea  483f              LDR      r0,|L21.488|
0000ec  3024              ADDS     r0,r0,#0x24
0000ee  6801              LDR      r1,[r0,#0]
0000f0  a06c              ADR      r0,|L21.676|
0000f2  f7fffffe          BL       __2printf
;;;130    																						
;;;131    		printf("SPI2->SCSR =0x%x\r\n",  SPI2->SCSR );  
0000f6  483c              LDR      r0,|L21.488|
0000f8  3028              ADDS     r0,r0,#0x28
0000fa  6801              LDR      r1,[r0,#0]
0000fc  a06e              ADR      r0,|L21.696|
0000fe  f7fffffe          BL       __2printf
;;;132    }
000102  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  |L21.260|
                          DCD      0x40015000
                  |L21.264|
000108  53504931          DCB      "SPI1->TXREG=0x%x\r\n",0
00010c  2d3e5458
000110  5245473d
000114  30782578
000118  0d0a00  
00011b  00                DCB      0
                  |L21.284|
00011c  53504931          DCB      "SPI1->RXREG=0x%x\r\n",0
000120  2d3e5258
000124  5245473d
000128  30782578
00012c  0d0a00  
00012f  00                DCB      0
                  |L21.304|
000130  53504931          DCB      "SPI1->CSTAT=0x%x\r\n",0
000134  2d3e4353
000138  5441543d
00013c  30782578
000140  0d0a00  
000143  00                DCB      0
                  |L21.324|
000144  53504931          DCB      "SPI1->INTSTAT=0x%x\r\n",0
000148  2d3e494e
00014c  54535441
000150  543d3078
000154  25780d0a
000158  00      
000159  00                DCB      0
00015a  00                DCB      0
00015b  00                DCB      0
                  |L21.348|
00015c  53504931          DCB      "SPI1->INTEN =0x%x\r\n",0
000160  2d3e494e
000164  54454e20
000168  3d307825
00016c  780d0a00
                  |L21.368|
000170  53504931          DCB      "SPI1->INTCLR=0x%x\r\n",0
000174  2d3e494e
000178  54434c52
00017c  3d307825
000180  780d0a00
                  |L21.388|
000184  53504931          DCB      "SPI1->GCTL  =0x%x\r\n",0
000188  2d3e4743
00018c  544c2020
000190  3d307825
000194  780d0a00
                  |L21.408|
000198  53504931          DCB      "SPI1->CCTL =0x%x\r\n",0
00019c  2d3e4343
0001a0  544c203d
0001a4  30782578
0001a8  0d0a00  
0001ab  00                DCB      0
                  |L21.428|
0001ac  53504931          DCB      "SPI1->SPBRG=0x%x\r\n",0
0001b0  2d3e5350
0001b4  4252473d
0001b8  30782578
0001bc  0d0a00  
0001bf  00                DCB      0
                  |L21.448|
0001c0  53504931          DCB      "SPI1->RXDNR=0x%x\r\n",0
0001c4  2d3e5258
0001c8  444e523d
0001cc  30782578
0001d0  0d0a00  
0001d3  00                DCB      0
                  |L21.468|
0001d4  53504931          DCB      "SPI1->SCSR =0x%x\r\n",0
0001d8  2d3e5343
0001dc  5352203d
0001e0  30782578
0001e4  0d0a00  
0001e7  00                DCB      0
                  |L21.488|
                          DCD      0x40015400
                  |L21.492|
0001ec  53504932          DCB      "SPI2->TXREG=0x%x\r\n",0
0001f0  2d3e5458
0001f4  5245473d
0001f8  30782578
0001fc  0d0a00  
0001ff  00                DCB      0
                  |L21.512|
000200  53504932          DCB      "SPI2->RXREG=0x%x\r\n",0
000204  2d3e5258
000208  5245473d
00020c  30782578
000210  0d0a00  
000213  00                DCB      0
                  |L21.532|
000214  53504932          DCB      "SPI2->CSTAT=0x%x\r\n",0
000218  2d3e4353
00021c  5441543d
000220  30782578
000224  0d0a00  
000227  00                DCB      0
                  |L21.552|
000228  53504932          DCB      "SPI2->INTSTAT=0x%x\r\n",0
00022c  2d3e494e
000230  54535441
000234  543d3078
000238  25780d0a
00023c  00      
00023d  00                DCB      0
00023e  00                DCB      0
00023f  00                DCB      0
                  |L21.576|
000240  53504932          DCB      "SPI2->INTEN =0x%x\r\n",0
000244  2d3e494e
000248  54454e20
00024c  3d307825
000250  780d0a00
                  |L21.596|
000254  53504932          DCB      "SPI2->INTCLR=0x%x\r\n",0
000258  2d3e494e
00025c  54434c52
000260  3d307825
000264  780d0a00
                  |L21.616|
000268  53504932          DCB      "SPI2->GCTL  =0x%x\r\n",0
00026c  2d3e4743
000270  544c2020
000274  3d307825
000278  780d0a00
                  |L21.636|
00027c  53504932          DCB      "SPI2->CCTL =0x%x\r\n",0
000280  2d3e4343
000284  544c203d
000288  30782578
00028c  0d0a00  
00028f  00                DCB      0
                  |L21.656|
000290  53504932          DCB      "SPI2->SPBRG=0x%x\r\n",0
000294  2d3e5350
000298  4252473d
00029c  30782578
0002a0  0d0a00  
0002a3  00                DCB      0
                  |L21.676|
0002a4  53504932          DCB      "SPI2->RXDNR=0x%x\r\n",0
0002a8  2d3e5258
0002ac  444e523d
0002b0  30782578
0002b4  0d0a00  
0002b7  00                DCB      0
                  |L21.696|
0002b8  53504932          DCB      "SPI2->SCSR =0x%x\r\n",0
0002bc  2d3e5343
0002c0  5352203d
0002c4  30782578
0002c8  0d0a00  
0002cb  00                DCB      0

                          AREA ||i.SPI_master_loop||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  SPI_master_loop PROC
;;;461    
;;;462    void SPI_master_loop(SPI_TypeDef* SPIx)
000000  b530              PUSH     {r4,r5,lr}
;;;463    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4605              MOV      r5,r0
;;;464    	unsigned int i;
;;;465    	unsigned char temp[20] = {0x55,0xaa,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x56,0x23,0xff,0xaa,0x87,0x89,0x88,0x20,0x34,0x38,0xcd};
000006  2214              MOVS     r2,#0x14
000008  a129              ADR      r1,|L22.176|
00000a  a806              ADD      r0,sp,#0x18
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;466    	unsigned char rxdata[20];
;;;467    	for(i=0;i<20;i++)
000010  2400              MOVS     r4,#0
000012  e003              B        |L22.28|
                  |L22.20|
;;;468    	{
;;;469    		rxdata[i] = 0x0;
000014  2000              MOVS     r0,#0
000016  a901              ADD      r1,sp,#4
000018  5508              STRB     r0,[r1,r4]
00001a  1c64              ADDS     r4,r4,#1              ;467
                  |L22.28|
00001c  2c14              CMP      r4,#0x14              ;467
00001e  d3f9              BCC      |L22.20|
;;;470    	}
;;;471    	
;;;472    	SPIM_Init(SPIx,0x3);
000020  2103              MOVS     r1,#3
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       SPIM_Init
;;;473    	SPIM_TXDisable(SPIx);       ////disable TXEN	clear fifo
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       SPIM_TXDisable
;;;474    	SPIM_RXDisable(SPIx); 			 //disable RXEN	clear fifo
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       SPIM_RXDisable
;;;475    	SPI_RxBytes(SPIx, 0x01); //SPI1_RXDNR = 0x01;
000034  2101              MOVS     r1,#1
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       SPI_RxBytes
;;;476    	SPIM_CSLow(SPIx);  				//Spi cs assign to this pin,select
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       SPIM_CSLow
;;;477    	SPIM_TXEn(SPIx); 				  //Transmit Enable bit TXEN
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       SPIM_TXEn
;;;478    	SPIM_RXEn(SPIx);
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       SPIM_RXEn
;;;479    	
;;;480    	for(i=0;i<20;i++)
00004e  2400              MOVS     r4,#0
000050  e010              B        |L22.116|
                  |L22.82|
;;;481    	{
;;;482    		SPIMSendByte(SPIx,temp[i]); 			//SPDAT = PP;CheckStatus();
000052  a806              ADD      r0,sp,#0x18
000054  5d01              LDRB     r1,[r0,r4]
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       SPIMSendByte
;;;483    		rxdata[i] = SPIM_Readbyte(SPIx);
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       SPIM_Readbyte
000062  a901              ADD      r1,sp,#4
000064  5508              STRB     r0,[r1,r4]
;;;484    		printf("rxdata[%d]=0x%x\r\n",i,rxdata[i]);
000066  a801              ADD      r0,sp,#4
000068  5d02              LDRB     r2,[r0,r4]
00006a  4621              MOV      r1,r4
00006c  a015              ADR      r0,|L22.196|
00006e  f7fffffe          BL       __2printf
000072  1c64              ADDS     r4,r4,#1              ;480
                  |L22.116|
000074  2c14              CMP      r4,#0x14              ;480
000076  d3ec              BCC      |L22.82|
;;;485    	}
;;;486    	for(i=0;i<20;i++)
000078  2400              MOVS     r4,#0
00007a  e00e              B        |L22.154|
                  |L22.124|
;;;487    	{
;;;488    		if(rxdata[i]!=temp[i])	
00007c  a801              ADD      r0,sp,#4
00007e  5d00              LDRB     r0,[r0,r4]
000080  a906              ADD      r1,sp,#0x18
000082  5d09              LDRB     r1,[r1,r4]
000084  4288              CMP      r0,r1
000086  d002              BEQ      |L22.142|
;;;489    			printf("err\r\n");
000088  a013              ADR      r0,|L22.216|
00008a  f7fffffe          BL       __2printf
                  |L22.142|
;;;490    		if(i==19)
00008e  2c13              CMP      r4,#0x13
000090  d102              BNE      |L22.152|
;;;491    		printf("OK\r\n");	
000092  a013              ADR      r0,|L22.224|
000094  f7fffffe          BL       __2printf
                  |L22.152|
000098  1c64              ADDS     r4,r4,#1              ;486
                  |L22.154|
00009a  2c14              CMP      r4,#0x14              ;486
00009c  d3ee              BCC      |L22.124|
;;;492    	}
;;;493    	
;;;494    	SPIM_TXDisable(SPIx);
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       SPIM_TXDisable
;;;495    	SPIM_RXDisable(SPIx); 			 //disable RXEN	
0000a4  4628              MOV      r0,r5
0000a6  f7fffffe          BL       SPIM_RXDisable
;;;496    	
;;;497    }
0000aa  b00b              ADD      sp,sp,#0x2c
0000ac  bd30              POP      {r4,r5,pc}
;;;498    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L22.176|
0000b0  55aa0102          DCB      "U",170,1,2,3,4,5,6,"\aV#",255,170,135,137,136," 48",205
0000b4  03040506
0000b8  075623ff
0000bc  aa878988
0000c0  203438cd
                  |L22.196|
0000c4  72786461          DCB      "rxdata[%d]=0x%x\r\n",0
0000c8  74615b25
0000cc  645d3d30
0000d0  7825780d
0000d4  0a00    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L22.216|
0000d8  6572720d          DCB      "err\r\n",0
0000dc  0a00    
0000de  00                DCB      0
0000df  00                DCB      0
                  |L22.224|
0000e0  4f4b0d0a          DCB      "OK\r\n",0
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0

                          AREA ||.ARM.__AT_0x00003400||, DATA, NOINIT, ALIGN=0

                  tmpdata
                          %        256

                          AREA ||.ARM.__AT_0x00003500||, DATA, NOINIT, ALIGN=0

                  rxtmpdata
                          %        256

                          AREA ||.data||, DATA, ALIGN=0

                  spi0_rx_flag
000000  00                DCB      0x00
                  spi0_tx_flag
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "bsp\\SPI\\spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_be420690____REV16|
#line 388 "..\\CMSIS_and_startup\\CMSIS\\cmsis_armcc.h"
|__asm___5_spi_c_be420690____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_be420690____REVSH|
#line 402
|__asm___5_spi_c_be420690____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_be420690____RRX|
#line 587
|__asm___5_spi_c_be420690____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
