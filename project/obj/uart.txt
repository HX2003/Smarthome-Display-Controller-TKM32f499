; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\uart.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS_and_startup -I..\CMSIS_and_startup\CMSIS -I.\bsp -I..\Hal_lib\inc -I.\bsp\LCD -I.\bsp\LED -I.\bsp\SPI -I.\bsp\sys -I.\bsp\UART -I.\bsp\Timer -I.\bsp\exit -I.\bsp\touchpad -I.\RTE\_TK499_LTDC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\Device\ARM\ARMCM4\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=527 -DARMCM4_FP --omf_browse=.\obj\uart.crf bsp\UART\UART.c]
                          THUMB

                          AREA ||i.Uart1_Receive||, CODE, READONLY, ALIGN=2

                  Uart1_Receive PROC
;;;34     }
;;;35     u8 Uart1_Receive(void)
000000  bf00              NOP      
                  |L1.2|
;;;36     {
;;;37     	//判断数据是否到来
;;;38       while((UART1->CSR & (1<<1)) ==0);
000002  4805              LDR      r0,|L1.24|
000004  6800              LDR      r0,[r0,#0]
000006  f0000002          AND      r0,r0,#2
00000a  2800              CMP      r0,#0
00000c  d0f9              BEQ      |L1.2|
;;;39     	return UART1->RDR;
00000e  4802              LDR      r0,|L1.24|
000010  1f00              SUBS     r0,r0,#4
000012  6800              LDR      r0,[r0,#0]
000014  b2c0              UXTB     r0,r0
;;;40     
;;;41     }
000016  4770              BX       lr
;;;42     
                          ENDP

                  |L1.24|
                          DCD      0x40010808

                          AREA ||i.UartInit||, CODE, READONLY, ALIGN=2

                  UartInit PROC
;;;2      
;;;3      void UartInit(UART_TypeDef* UARTx,int BaudRate)
000000  b530              PUSH     {r4,r5,lr}
;;;4      {
000002  b087              SUB      sp,sp,#0x1c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;5      	UART_InitTypeDef       UART_InitStructure;  
;;;6      	GPIO_InitTypeDef  GPIO_InitStructure;   
;;;7      	
;;;8      	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
000008  2101              MOVS     r1,#1
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;9      	GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_9;   //uart1_tx  PA9
000010  f44f7000          MOV      r0,#0x200
000014  9001              STR      r0,[sp,#4]
;;;10       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
000016  2002              MOVS     r0,#2
000018  f88d0008          STRB     r0,[sp,#8]
;;;11       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; // 推免复用输出
00001c  2018              MOVS     r0,#0x18
00001e  f88d0009          STRB     r0,[sp,#9]
;;;12       GPIO_Init(GPIOA, &GPIO_InitStructure);
000022  a901              ADD      r1,sp,#4
000024  481b              LDR      r0,|L2.148|
000026  f7fffffe          BL       GPIO_Init
;;;13     
;;;14       GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_10;  //uart1_rx  PA10
00002a  f44f6080          MOV      r0,#0x400
00002e  9001              STR      r0,[sp,#4]
;;;15       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
000030  2002              MOVS     r0,#2
000032  f88d0008          STRB     r0,[sp,#8]
;;;16        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; //上拉输入GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; // 推免复用输出////   
000036  2048              MOVS     r0,#0x48
000038  f88d0009          STRB     r0,[sp,#9]
;;;17     
;;;18       GPIO_Init(GPIOA, &GPIO_InitStructure);
00003c  a901              ADD      r1,sp,#4
00003e  4815              LDR      r0,|L2.148|
000040  f7fffffe          BL       GPIO_Init
;;;19     	
;;;20     	GPIO_PinAFConfig(GPIOA, GPIO_Pin_9 | GPIO_Pin_10, GPIO_AF_UART_1); //PA9、PA10复用为串口1
000044  2208              MOVS     r2,#8
000046  f44f61c0          MOV      r1,#0x600
00004a  4812              LDR      r0,|L2.148|
00004c  f7fffffe          BL       GPIO_PinAFConfig
;;;21     	
;;;22     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_UART1, ENABLE);
000050  2101              MOVS     r1,#1
000052  2004              MOVS     r0,#4
000054  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;23     	UART_InitStructure.UART_BaudRate = BaudRate; //波特率
000058  9403              STR      r4,[sp,#0xc]
;;;24       UART_InitStructure.UART_WordLength = UART_WordLength_8b;//数据位
00005a  2030              MOVS     r0,#0x30
00005c  f8ad0010          STRH     r0,[sp,#0x10]
;;;25       UART_InitStructure.UART_StopBits = UART_StopBits_1;//停止位
000060  2000              MOVS     r0,#0
000062  f8ad0012          STRH     r0,[sp,#0x12]
;;;26       UART_InitStructure.UART_Parity = UART_Parity_No ;
000066  f8ad0014          STRH     r0,[sp,#0x14]
;;;27       UART_InitStructure.UART_Mode = UART_Mode_Rx | UART_Mode_Tx;//输入输出模式
00006a  2018              MOVS     r0,#0x18
00006c  f8ad0016          STRH     r0,[sp,#0x16]
;;;28       UART_InitStructure.UART_HardwareFlowControl = UART_HardwareFlowControl_None; 	
000070  2000              MOVS     r0,#0
000072  f8ad0018          STRH     r0,[sp,#0x18]
;;;29     	UART_Init(UARTx, &UART_InitStructure);
000076  a903              ADD      r1,sp,#0xc
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       UART_Init
;;;30     	UART_Cmd(UARTx, ENABLE);  //UART 模块使能
00007e  2101              MOVS     r1,#1
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       UART_Cmd
;;;31     	
;;;32       UART_ClearITPendingBit(UARTx, 0xff); 
000086  21ff              MOVS     r1,#0xff
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       UART_ClearITPendingBit
;;;33     
;;;34     }
00008e  b007              ADD      sp,sp,#0x1c
000090  bd30              POP      {r4,r5,pc}
;;;35     u8 Uart1_Receive(void)
                          ENDP

000092  0000              DCW      0x0000
                  |L2.148|
                          DCD      0x40020000

                          AREA ||i._sys_exit||, CODE, READONLY, ALIGN=1

                  _sys_exit PROC
;;;70     
;;;71     void _sys_exit(int x) 
000000  bf00              NOP      
;;;72     { 
;;;73     	x = x; 
;;;74     } 
000002  4770              BX       lr
;;;75     
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;75     
;;;76     int fputc(int ch, FILE *f)
000000  bf00              NOP      
                  |L4.2|
;;;77     {      
;;;78     	while((UART1->CSR &0x1) == 0){}
000002  4a05              LDR      r2,|L4.24|
000004  6812              LDR      r2,[r2,#0]
000006  f0020201          AND      r2,r2,#1
00000a  2a00              CMP      r2,#0
00000c  d0f9              BEQ      |L4.2|
;;;79     		UART1->TDR = (u8) ch;      
00000e  b2c2              UXTB     r2,r0
000010  4b01              LDR      r3,|L4.24|
000012  3b08              SUBS     r3,r3,#8
000014  601a              STR      r2,[r3,#0]
;;;80     	return ch;
;;;81     }
000016  4770              BX       lr
;;;82     
                          ENDP

                  |L4.24|
                          DCD      0x40010808

                          AREA ||i.send_data||, CODE, READONLY, ALIGN=2

                  send_data PROC
;;;42     
;;;43     void send_data(u8 data)
000000  bf00              NOP      
                  |L5.2|
;;;44     {
;;;45     	while((UART1->CSR &0x1) == 0);
000002  4905              LDR      r1,|L5.24|
000004  6809              LDR      r1,[r1,#0]
000006  f0010101          AND      r1,r1,#1
00000a  2900              CMP      r1,#0
00000c  d0f9              BEQ      |L5.2|
;;;46     	UART1->TDR = data; 
00000e  4902              LDR      r1,|L5.24|
000010  3908              SUBS     r1,r1,#8
000012  6008              STR      r0,[r1,#0]
;;;47     }
000014  4770              BX       lr
;;;48     void send_group(u8*data,u16 len)
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      0x40010808

                          AREA ||i.send_group||, CODE, READONLY, ALIGN=1

                  send_group PROC
;;;47     }
;;;48     void send_group(u8*data,u16 len)
000000  b510              PUSH     {r4,lr}
;;;49     {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;50     	while(len--)
000006  e003              B        |L6.16|
                  |L6.8|
;;;51     	send_data(*data++);
000008  f8120b01          LDRB     r0,[r2],#1
00000c  f7fffffe          BL       send_data
                  |L6.16|
000010  1e18              SUBS     r0,r3,#0              ;50
000012  f1a30101          SUB      r1,r3,#1              ;50
000016  b28b              UXTH     r3,r1                 ;50
000018  d1f6              BNE      |L6.8|
;;;52     }
00001a  bd10              POP      {r4,pc}
;;;53     void send_str(char *p)
                          ENDP


                          AREA ||i.send_str||, CODE, READONLY, ALIGN=1

                  send_str PROC
;;;52     }
;;;53     void send_str(char *p)
000000  b500              PUSH     {lr}
;;;54     {
000002  4602              MOV      r2,r0
;;;55     		while(*p != '\0')
000004  e003              B        |L7.14|
                  |L7.6|
;;;56     		{
;;;57     			send_data(*p);
000006  7810              LDRB     r0,[r2,#0]
000008  f7fffffe          BL       send_data
;;;58     			p++;
00000c  1c52              ADDS     r2,r2,#1
                  |L7.14|
00000e  7810              LDRB     r0,[r2,#0]            ;55
000010  2800              CMP      r0,#0                 ;55
000012  d1f8              BNE      |L7.6|
;;;59     		}
;;;60     }
000014  bd00              POP      {pc}
;;;61     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "bsp\\UART\\UART.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_UART_c_UartInit____REV16|
#line 388 "..\\CMSIS_and_startup\\CMSIS\\cmsis_armcc.h"
|__asm___6_UART_c_UartInit____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_UART_c_UartInit____REVSH|
#line 402
|__asm___6_UART_c_UartInit____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_UART_c_UartInit____RRX|
#line 587
|__asm___6_UART_c_UartInit____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
